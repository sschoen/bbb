
## usually done by bbb if not run in container:
- name: Switch off hugepages
  copy:
    src: transparent_hugepage.conf
    dest: /etc/tmpfiles.d/transparent_hugepage.conf
  tags:
    - on_install

- name: Optimize ondemand governor
  copy:
    src: ondemand.conf
    dest: /etc/tmpfiles.d/ondemand.conf
  when: not 'b3srv002' in inventory_hostname
  tags:
    - on_install

- name: Provide BBB fail2ban configuration
  copy:
    src: "{{ item.src }}"
    dest: "{{ item.dest }}"
  with_items:
    - { src: ufw-route.conf, dest: /etc/fail2ban/action.d/ }
    - { src: BBBfreeswitch.local, dest: /etc/fail2ban/filter.d/ }
    - { src: BBBjail.local, dest: /etc/fail2ban/jail.d/ }
  notify: Reload fail2ban
  tags:
    - on_install

- name: Collect all logs for failed ssh logins
  blockinfile:
    path: /etc/fail2ban/jail.d/defaults-debian.conf
    block: |
      bantime  = 1w
      logpath = %(sshd_log)s
                /var/lib/machines/bbb???-???/var/log/auth.log
                /var/lib/machines/turn???/var/log/auth.log
  notify: Reload fail2ban
  tags:
    - on_install

- name: Generate list of available BBBs
  set_fact:
    bbbcontainer: "{{ bbbcontainer }} + [ '{{ item }}' ]"
  when: lookup('dig', item ~ '.' ~ ansible_domain) | ipaddr(guest_network)
  with_sequence: >
    start=1
    end={{ [max_num_bbbs|default(255)|int, guest_network|ipaddr('size')|int - 2 - debcontainer|length] | min }}
    format=bbb{{ ansible_hostname | replace('b3srv', '')}}-%03d
  tags:
    - always

- name: Disable BBBs on scalelite
  command: "/usr/local/sbin/bbb-poolserver disable {{ item }}"
  delegate_to: "scale001.{{ ansible_domain }}"
  register: bbb_pool
  loop: "{{ bbbcontainer }}"
  changed_when: bbb_pool.stdout is not search("already")
  tags:
    - never
    - bbb_upgrade
    - bbb_disable

##########################################################
- name: check if template is available
  stat:
    path: "/var/lib/machines/{{ bbbcontainer[0] }}"
  register: template

# include ubuntu-container.yml
- name: Generate Ubuntu container
  import_tasks: ubuntu-container.yml
  when: not template.stat.exists

## replaced {{ containr_image }} by 'bbb{{ inventory_hostname | replace('b3srv', '')}}-001'
- name: Fetch and/or clone container image
  script: mkbbbcont  bbb{{ ansible_hostname | replace('b3srv', '')}}-001  {{ item }}  {{ lookup('dig', '{{ item }}.{{ ansible_domain }}') }}
  args:
    creates: "/var/lib/machines/{{ item }}"
  loop: "{{ bbbcontainer }}"
  when: template.stat.exists
  tags:
    - on_install

## Provide all other configuration here:
- name: Provide container configuration
  template:
    src: containercfg.nspawn.j2
    dest: "/etc/systemd/nspawn/{{ item }}.nspawn"
  loop: "{{ bbbcontainer }}"
  tags:
    - on_install

- name: Provide individual container nic config
  template:
    src: interfaces.j2
    dest: "/var/lib/machines/config/{{ item }}_interfaces"
  loop: "{{ bbbcontainer }}"
  tags:
    - on_install

- name: Provide individual hosts file
  template:
    src: hosts.j2
    dest: "/var/lib/machines/config/{{ item }}_hosts"
  loop: "{{ bbbcontainer }}"
  tags:
    - on_install

- name: Provide hostname
  lineinfile:
    path: "/var/lib/machines/config/{{ item }}_hostname"
    line: "{{ item }}"
    create: yes
  loop: "{{ bbbcontainer }}"
  tags:
    - on_install

- name: Install BBB in the template
  import_tasks: bbbupgrade-prepare.yml
  when: not template.stat.exists

# for upgrading the BBBs, include bbbupgrade.yml
- name: Import BBB upgrade tasks
  import_tasks: bbbupgrade-prepare.yml
  tags:
    - never
    - bbb_upgrade

######################

- name: Set container property MemoryHigh
  command:
    cmd: systemctl set-property systemd-nspawn@{{ item }} MemoryHigh={{ MemoryHigh }}
    creates: /etc/systemd/system.control/systemd-nspawn@{{ item }}.service.d/50-MemoryHigh.conf
  loop: "{{ bbbcontainer }}"
  tags:
    - on_install

- name: Set container property CPUQuota
  command:
    cmd: systemctl set-property systemd-nspawn@{{ item }} CPUQuota={{ CPUQuota }}
    creates: /etc/systemd/system.control/systemd-nspawn@{{ item }}.service.d/50-CPUQuota.conf
  loop: "{{ bbbcontainer }}"
  tags:
    - on_install


- name: Set stun and turn servers
  template:
    src: turn-stun-servers.xml.j2
    dest: "/var/lib/machines/{{ item }}/usr/share/bbb-web/WEB-INF/classes/spring/turn-stun-servers.xml"
  loop: "{{ bbbcontainer }}"
  tags:
    - bbb_upgrade

- name: Remove useless BBB index.html page
  command: mv index.html index.html.orig
  args:
    chdir: "/var/lib/machines/{{ item }}/var/www/bigbluebutton-default/"
    removes: "/var/lib/machines/{{ item }}/var/www/bigbluebutton-default/index.html"
  loop: "{{ bbbcontainer }}"
  tags:
    - bbb_upgrade

- name: Make sure recordings are disabled
  lineinfile:
    path: "/var/lib/machines/{{ item }}/usr/share/bbb-web/WEB-INF/classes/bigbluebutton.properties"
    regexp: "^disableRecordingDefault="
    line: "disableRecordingDefault=true"
  loop: "{{ bbbcontainer }}"
  tags:
    - bbb_upgrade

- name: Disable the disable-transparent-huge-pages.service
  file:
    path: "/var/lib/machines/{{ item }}/etc/systemd/system/multi-user.target.wants/disable-transparent-huge-pages.service"
    state: absent
  loop: "{{ bbbcontainer }}"
  tags:
    - bbb_upgrade

- name: Disable freeswitch IO scheduling optimization
  replace:
    path: "/var/lib/machines/{{ item }}/lib/systemd/system/freeswitch.service"
    regexp: "(^IOScheduling.*)"
    replace: '#\1'
  loop: "{{ bbbcontainer }}"
  tags:
    - bbb_upgrade

- name: Disable freeswitch CPU scheduling optimization
  replace:
    path: "/var/lib/machines/{{ item }}/lib/systemd/system/freeswitch.service"
    regexp: "(^CPUScheduling.*)"
    replace: '#\1'
  loop: "{{ bbbcontainer }}"
  tags:
    - bbb_upgrade

## Copy scripts for monitoring with checkmk to containers
- name: Copy check-script to container BBB
  copy:
    src: checkbbb_for_chost.py
    dest: /var/lib/machines/{{ item  }}/usr/local/bin/checkbbb_for_chost.py
    owner: root
    group: root
    mode: 0755
  loop: "{{ bbbcontainer }}"
  tags:
    - monitoring

- name: Start containers
  systemd:
    name: systemd-nspawn@{{ item }}.service
    state: started
  register: startcont
  loop: "{{ bbbcontainer }}"
  tags:
    - always

- name: Wait a minute for containers to settle
  pause:
    minutes: 1
  when: startcont.changed
  tags:
    - always

- name: Reset BBBs
  command:
    cmd: systemd-run --unit=bbb-conf-clean -M {{ item }} -- /usr/bin/bbb-conf --clean
  register: bbb_reset
  loop: "{{ bbbcontainer }}"
  tags:
    - never
    - bbb_upgrade

- name: Wait a minute for containers to settle
  pause:
    minutes: 2
  when: bbb_reset is defined and bbb_reset.changed
  tags:
    - on_install
    - bbb_upgrade

- name: Provide ssh-hostkey
  command:
    cmd: systemd-run --unit=ssh-hostkey -M {{ item }} /usr/sbin/dpkg-reconfigure openssh-server
    creates: "/var/lib/machines/{{ item }}/etc/ssh/ssh_host_*"
  loop: "{{ bbbcontainer }}"
  tags:
    - on_install


## Check container and BBB services
- name: Container status check
  command: systemctl list-machines
  register: status
  changed_when: status.stdout is search("degraded")
  tags:
    - bbb_check
    - bbb_upgrade

- name: Show output
  debug:
    msg: "{{ status.stdout_lines }}"
  register: machineres
  changed_when: status.stdout is search("degraded")
  when: status.stdout_lines is defined and status.stdout is search("degraded")
  tags:
    - bbb_check
    - bbb_upgrade


## Check 'bbb-conf --status' inside container
- name: Run BBB status check on containers
  command: systemd-run --unit=bbb-status -M {{ item }} -- /usr/bin/bbb-conf --status
  register: status
  changed_when: "status.stderr is not search('Running as unit: bbb-status.service')"
  loop: "{{ bbbcontainer }}"
  tags:
    - bbb_check
    - bbb_upgrade

- name: Wait 5 seconds for status check results
  pause:
    seconds: 5
  tags:
    - bbb_check
    - bbb_upgrade

- name: Check BBB status results
  command: journalctl --unit=bbb-status --lines=14 --all -M {{ item }}
  register: bbbstatus
  changed_when: bbbstatus.stdout is search('inactive') or bbbstatus.stdout is search('failed')
  loop: "{{ bbbcontainer }}"
  tags:
    - bbb_check
    - bbb_upgrade

- name: Show bad BBB status results
  debug:
    msg: "{{ item.stdout_lines }}"
  when: item.stdout is search('inactive') or item.stdout is search('failed')
  register: statusres
  changed_when: item.stdout is search('inactive') or item.stdout is search('failed')
  loop: "{{ bbbstatus.results }}"
  loop_control:
    label: "{{ item.item }}"
  tags:
    - bbb_check
    - bbb_upgrade


## Check 'bbb-conf --check' inside container
- name: Run BBB config check on containers
  command: systemd-run --unit=bbb-check -M {{ item }} -- /usr/bin/bbb-conf --check
  register: status
  changed_when: "status.stderr is not search('Running as unit: bbb-check.service')"
  loop: "{{ bbbcontainer }}"
  tags:
    - bbb_check
    - bbb_upgrade

- name: Wait 5 seconds for check results
  pause:
    seconds: 5
  tags:
    - bbb_check
    - bbb_upgrade

- name: Check BBB check results
  command: journalctl --unit=bbb-check -b --all -M {{ item }}
  register: bbbcheck
  changed_when: bbbcheck.stdout_lines[-1] is not search('# Potential problems described below')
  loop: "{{ bbbcontainer }}"
  tags:
    - bbb_check
    - bbb_upgrade

- name: Show bad BBB status results
  debug:
    msg: "{{ item.stdout_lines }}"
  when: item.stdout_lines[-1] is not search('# Potential problems described below')
  register: checkres
  changed_when: item.stdout_lines[-1] is not search('# Potential problems described below')
  loop: "{{ bbbcheck.results }}"
  loop_control:
    label: "{{ item.item }}"
  tags:
    - bbb_check
    - bbb_upgrade


- name: Enable BBBs on scalelite
  command: "/usr/local/sbin/bbb-poolserver enable {{ item }}"
  delegate_to: "scale001.{{ ansible_domain }}"
  when: >
    not machineres.changed | default(false) and
    not statusres.changed  | default(false) and
    not checkres.changed | default(false)
  loop: "{{ bbbcontainer }}"
  tags:
    - never
    - bbb_enable


###########################
####### WORKAROUNDS #######
###########################

## Issue: Kurento goes crazy from time to time, taking all CPU time it
## can get.
## Make sure it is restarted daily until a propper fix is available.
## The upstream cronjob in '/etc/cron.hourly/bbb-restart-kms' fails if
## there are still users in meetings.

- name: Make sure Kurento is restarted every day
  lineinfile:
    path: "/var/lib/machines/{{ item }}/etc/cron.daily/bigbluebutton"
    regexp: "^systemctl restart kurento-media-server"
    line: >
      systemctl restart kurento-media-server bbb-webrtc-sfu &&
      date +%Y-%m-%d\ %H:%M:%S > /var/tmp/bbb-kms-last-restart.txt
  loop: "{{ bbbcontainer }}"
  tags:
    - bbb_upgrade
